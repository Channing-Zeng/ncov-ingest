#!/usr/bin/env python3
"""
Check annotations for potential errors / missing data
"""

## Not part of this script, but you can check if a strain has duplica

import sys
import pandas as pd
import argparse
from pathlib import Path


ALLOWED_TRAIT_NAMES = set(
    [
        "strain",
        "authors",
        "host",
        "date",
        "genbank_accession",
        "region",
        "country",
        "division",
        "location",
        "region_exposure",
        "country_exposure",
        "division_exposure",
        "originating_lab",
    ]
)


def read_annotations_file(file_name):
    """Read the annotations TSV file"""
    annotations = pd.read_csv(file_name, header=None, sep="\t", comment="#")
    annotations.columns = ["strain", "gisaid_epi_isl", "trait", "value"]
    return annotations


def print_duplicates(annotations):
    """Print rows having the same strain and trait"""
    keys = []
    for index, row in annotations.iterrows():
        key = row["strain"] + "_" + row["trait"]
        if key in keys:
            print("{}: {} {}".format(index, row["strain"], row["trait"]))
        keys.append(key)


def reshape_annotations(annotations):
    """Pivot the table and print duplicates"""
    try:
        annotations = annotations.pivot(index="strain", columns="trait", values="value")
    except ValueError as ve:
        print("Error reshaping the annotations table.")
        print("This is potentially because there are duplicate definitions in the TSV.")
        print("The following are matched as duplicate: (lineno: strain trait)")
        print_duplicates(annotations)
        raise ve
    return annotations


def check_annotation(annotations):
    """Check annotations with several rules"""
    invalid_traits = set(annotations.columns) - ALLOWED_TRAIT_NAMES
    if len(invalid_traits):
        print("The following traits are unexpected and probably shouldn't be in the TSV:")
        print(invalid_traits)
        raise Exception("Found traits that aren't allowed")


if __name__ == "__main__":
    base = Path(__file__).resolve().parent.parent

    parser = argparse.ArgumentParser(
        description="Check if annotations from a metadata file is valid.",
        formatter_class=argparse.RawTextHelpFormatter
    )

    parser.add_argument(
            "--annotations",
            default=base / "source-data/annotations.tsv",
            help="Annotation file (in TSV format) to be checked.\n")

    args = parser.parse_args()

    print("Ensuring that there are no unexpected trait names defined in the annotations file {}...".format(args.annotations))
    try:
        ann = read_annotations_file(args.annotations)
        ann = reshape_annotations(ann)
        check_annotation(ann)
    except Exception as e:
        sys.exit(e)
    print("Everything looks fine!")
