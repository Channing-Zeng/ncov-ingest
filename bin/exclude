#!/usr/bin/env python3
"""
Creates a list of exclusions from the provided metadata TSV in the Nextstrain
exclusions.txt convention. Prints the list to stdout.
"""
import os
import json
import logging
import requests
import argparse
import pandas as pd
from pathlib import Path
from datetime import datetime
from urllib3.exceptions import HTTPError


LOG = logging.getLogger(__name__)


def warn_future_dates(gisaid_data: pd.DataFrame):
    """
    Sends a Slack message detailing any GISAID EPI ISL IDs in a given
    *gisaid_data* DataFrame that have collection dates from the future (e.g. a
    date > now).
    """
    def future_date(row: pd.Series):
        """
        Inserts a key-value pair in the within-scope *future_dates* dictionary
        for every GISAID EPI ISL ID and future date, respectively.
        """
        for datetime_format in ('%Y-%m-%d', '%Y-%m', '%Y'):
            try:
                date = datetime.strptime(row.date, datetime_format)
            except ValueError:
                continue

            if date > datetime.now():
                future_dates[row.gisaid_epi_isl] = row.date

            return

    future_dates = {}
    gisaid_data.apply(future_date, axis=1)

    if not future_dates:
        return

    payload = {
        "channel": f"{os.environ.get('SLACK_CHANNEL')}",
        "text": ":crystal_ball: Future dates found.",
        "blocks": [{
            "type": "section",
            "text": {
                "type": "mrkdwn",
                "text": ":crystal_ball: Future dates found.",
            },
            "fields": [
                {"type": "mrkdwn", "text": f"*{uid}*: {date}"}
                    for uid, date in future_dates.items()
            ],
        }],
    }

    response = requests.post("https://slack.com/api/chat.postMessage",
        data=json.dumps(payload),
        headers={
            'Content-type': 'application/json',
            'Authorization': f'Bearer {os.environ.get("SLACK_TOKEN")}'
        })

    response.raise_for_status()


if __name__ == '__main__':
    base = Path(__file__).resolve().parent.parent

    parser = argparse.ArgumentParser(
        description="Warn about future dates in a metadata TSV file.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("metadata",
        nargs="?",
        default=base / "data/metadata.tsv",
        help="Location of generated metadata tsv. Defaults to `data/metadata.tsv`")
    args = parser.parse_args()

    metadata = pd.read_csv(args.metadata, sep="\t")

    # Warn about future dates
    try:
        warn_future_dates(metadata)
    except HTTPError:
        LOG.info("Slack message couldn't be sent, but continuing anyway.")
